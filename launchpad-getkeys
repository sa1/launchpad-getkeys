#! /bin/bash

if [ "`whoami`" != "root" ];
then
echo "Please run with SUDO"
exit 1
fi

function HELP ()
{
echo "

launchpad-getkeys is an utility to automatically import all
Lunchpad PPAs missing GPG keys.

Usage:
* use without any parameter to automatically import all the missing
GPG keys
* -k SERVER:PORT will pass a new keyserver, in case the default
keyserver is down
* -p PROXY:PORT lets you specify a proxy-server other than the default one.
* -q KEY install specified key instead of looking for  missing keys, can occur multiple times
"
exit 0
}

declare -a EXTRA_KEYS
while getopts "k:p:q:h\?" opt; do
	case "$opt" in
		k ) KEYSERVER="$OPTARG"			;;
		p ) PROXY="$OPTARG"			;;
        q ) EXTRA_KEYS=("${EXTRA_KEYS[@]}" "$OPTARG")        ;;
		h ) HELP				;;
		\?) HELP				;;
		* ) warn "Unknown option '$opt'";	;;
	esac
done
shift $(($OPTIND -1))

if [[ $KEYSERVER ]]; then

	KEYSERVERANDPORT=$(echo $KEYSERVER | grep ":")
		if [[ ! $KEYSERVERANDPORT ]]; then
		echo "Error: please enter a keyserver and a port, like so: sudo launchpad-getkeys -k SERVER:PORT"
		exit 0
	fi
else
    KEYSERVER=keyserver.ubuntu.com:80
fi

if [[ $PROXY ]]; then

	PROXYSERVERANDPORT=$(echo $PROXY | grep ":")
		if [[ ! $PROXYSERVERANDPORT ]]; then
		echo "Error: please enter a proxyserver and a port, like so: sudo launchpad-getkeys -p http://PROXYSERVER:PORT"
		exit 0
	fi
fi

if [[ ! $PROXY ]]; then
	PROXY=$http_proxy	
fi

PGDIR=${GNUPGHOME:-$HOME/.gnupg}
if [ ! -d $PGDIR ]; then
    mkdir $PGDIR
    chmod 700 $PGDIR
fi

PROXY_OPTS=()
if [[ ! -z ${PROXY:-} ]]; then
    PROXY_OPTS=( --keyserver-options http-proxy=$PROXY )
fi


install_key ()
{
    PAR_KEY=$1


    GPGTMPHOME=$(mktemp -d /tmp/gpg-tmp-home.XXXXXXXXXX)
    KEYBOX=$GPGTMPHOME/pubring.gpg
    KEYSRV_OPTS=( --keyserver hkp://keyserver.ubuntu.com:80 )
    if [[ $KEYSERVER ]]; then
        KEYSRV_OPTS=( --keyserver hkp://$KEYSERVER )
    fi

    gpg --ignore-time-conflict --no-options --no-default-keyring \
        --no-auto-check-trustdb --trust-model always \
        --homedir "$GPGTMPHOME"                      \
        --keyring "$KEYBOX"          \
        "${KEYSRV_OPTS[@]}"  "${PROXY_OPTS[@]}"                    \
        --recv $PAR_KEY  2>$GPGTMPHOME/gpg.stderr
    >&2 cat $GPGTMPHOME/gpg.stderr
    TGT_NAME_BASE=$(cat  $GPGTMPHOME/gpg.stderr \
            | grep -F -m 1 "public key" \
            | sed -e 's/^[^"]*"//' \
            | sed -e 's/"[^"]*//' \
            | sed -e 's/ /__/g' \
            | sed -e 's/[<>:]//g')

    TGT_GPG_DIR=/etc/apt/trusted.gpg.d
    mkdir -p $TGT_GPG_DIR
    TGT_GPG="${TGT_GPG_DIR}/launchpad-getkeys_imported__${TGT_NAME_BASE}__${PAR_KEY}.gpg"
    [ -f "$TGT_GPG" ] && rm -f "$TGT_GPG"
    gpg --ignore-time-conflict --no-options --no-default-keyring \
        --no-auto-check-trustdb --trust-model always \
        --homedir "$GPGTMPHOME" --keyring "$KEYBOX"  \
        --export  --output $TGT_GPG
    echo "Key $PAR_KEY added at $TGT_GPG_DIR"
    rm -Rf $GPGTMPHOME
}

if ! [ ${#EXTRA_KEYS[@]} -eq 0 ]; then
    echo "Installing extra keys."
    for key in "${EXTRA_KEYS[@]}"; do
        echo "  Installing key $key"
        install_key $key
    done

    echo "Done installing keys."
    exit 0
fi


echo "
Please wait... launchpad-getkeys is running an update so 
it can detect the missing GPG keys"
apt-get update -qq 2> /tmp/updateresults


MISSINGGEYS=$(cat /tmp/updateresults)

if [[ $MISSINGGEYS ]]; then

declare -a IMPORTED_KEYS=()

echo "
Trying to import all the missing keys"

	IFS=$'\n'
	n=1
	while read curline; do
		GPGKEYTOGET=$(echo $curline | grep NO_PUBKEY | sed -e 's/.*: \|NO_PUBKEY //g')
        [ -z "${GPGKEYTOGET}" ] && continue # Skip empty values
        [[ " ${IMPORTED_KEYS[@]} " =~ " ${GPGKEYTOGET} " ]] && continue # Skip repeatable keys
        install_key $GPGKEYTOGET
        IMPORTED_KEYS+=($GPGKEYTOGET)
		let n=n+1
	done < /tmp/updateresults

	echo "
launchpad-getkeys has finished importing all missing GPG keys. 
Try running "sudo apt-get update" - you shouldn't see any key 
errors anymore"
else
	echo "
There are no missing GPG keys!"
fi

rm /tmp/updateresults
